import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

// Classroom Class
class Classroom {
    private String name;
    private List<Student> students = new ArrayList<>();
    private List<Assignment> assignments = new ArrayList<>();

    public Classroom(String name) {
        this.name = name;
    }

    public String getName() {
        return name;
    }

    public void addStudent(Student student) {
        students.add(student);
    }

    public void addAssignment(Assignment assignment) {
        assignments.add(assignment);
    }

    public void listStudents() {
        for (Student student : students) {
            System.out.println("Student ID: " + student.getId());
        }
    }

    public void listAssignments() {
        for (Assignment assignment : assignments) {
            System.out.println("Assignment: " + assignment.getDetails());
        }
    }
}

// Student Class
class Student {
    private String id;

    public Student(String id) {
        this.id = id;
    }

    public String getId() {
        return id;
    }
}

// Assignment Class
class Assignment {
    private String details;

    public Assignment(String details) {
        this.details = details;
    }

    public String getDetails() {
        return details;
    }
}

// Factory Interface
interface Factory<T> {
    T create(String name);
}

// Classroom Factory
class ClassroomFactory implements Factory<Classroom> {
    public Classroom create(String name) {
        return new Classroom(name);
    }
}

// Student Factory
class StudentFactory implements Factory<Student> {
    public Student create(String id) {
        return new Student(id);
    }
}

// Observer Interface
interface Observer {
    void update(String studentId, String className, String assignmentDetails);
}

// Subject Interface
interface Subject {
    void addObserver(Observer observer);
    void removeObserver(Observer observer);
    void notifyObservers(String studentId, String className, String assignmentDetails);
}

// Assignment Manager
class AssignmentManager implements Subject {
    private List<Observer> observers = new ArrayList<>();
    
    @Override
    public void addObserver(Observer observer) {
        observers.add(observer);
    }

    @Override
    public void removeObserver(Observer observer) {
        observers.remove(observer);
    }

    @Override
    public void notifyObservers(String studentId, String className, String assignmentDetails) {
        for (Observer observer : observers) {
            observer.update(studentId, className, assignmentDetails);
        }
    }
}

// Concrete Observer
class AssignmentSubmissionNotifier implements Observer {
    @Override
    public void update(String studentId, String className, String assignmentDetails) {
        System.out.println("Assignment submitted by Student " + studentId + " in " + className + ": " + assignmentDetails);
    }
}

// Command Interface
interface Command {
    void execute();
}

// Concrete Commands
class AddClassroomCommand implements Command {
    private ClassroomFactory factory;
    private String name;
    private List<Classroom> classrooms;

    public AddClassroomCommand(ClassroomFactory factory, String name, List<Classroom> classrooms) {
        this.factory = factory;
        this.name = name;
        this.classrooms = classrooms;
    }

    @Override
    public void execute() {
        Classroom classroom = factory.create(name);
        classrooms.add(classroom);
        System.out.println("Classroom " + name + " has been created.");
    }
}

class AddStudentCommand implements Command {
    private StudentFactory factory;
    private String id;
    private String className;
    private List<Classroom> classrooms;

    public AddStudentCommand(StudentFactory factory, String id, String className, List<Classroom> classrooms) {
        this.factory = factory;
        this.id = id;
        this.className = className;
        this.classrooms = classrooms;
    }

    @Override
    public void execute() {
        Student student = factory.create(id);
        for (Classroom classroom : classrooms) {
            if (classroom.getName().equals(className)) {
                classroom.addStudent(student);
                System.out.println("Student " + id + " has been enrolled in " + className + ".");
                return;
            }
        }
        System.out.println("Classroom " + className + " not found.");
    }
}

class ScheduleAssignmentCommand implements Command {
    private String className;
    private String details;
    private List<Classroom> classrooms;

    public ScheduleAssignmentCommand(String className, String details, List<Classroom> classrooms) {
        this.className = className;
        this.details = details;
        this.classrooms = classrooms;
    }

    @Override
    public void execute() {
        for (Classroom classroom : classrooms) {
            if (classroom.getName().equals(className)) {
                classroom.addAssignment(new Assignment(details));
                System.out.println("Assignment for " + className + " has been scheduled.");
                return;
            }
        }
        System.out.println("Classroom " + className + " not found.");
    }
}

class SubmitAssignmentCommand implements Command {
    private String studentId;
    private String className;
    private String assignmentDetails;
    private AssignmentManager manager;

    public SubmitAssignmentCommand(String studentId, String className, String assignmentDetails, AssignmentManager manager) {
        this.studentId = studentId;
        this.className = className;
        this.assignmentDetails = assignmentDetails;
        this.manager = manager;
    }

    @Override
    public void execute() {
        manager.notifyObservers(studentId, className, assignmentDetails);
    }
}

// Main Application
public class VirtualClassroomManager {

    public static void main(String[] args) {
        List<Classroom> classrooms = new ArrayList<>();
        ClassroomFactory classroomFactory = new ClassroomFactory();
        StudentFactory studentFactory = new StudentFactory();
        AssignmentManager assignmentManager = new AssignmentManager();
        AssignmentSubmissionNotifier notifier = new AssignmentSubmissionNotifier();
        assignmentManager.addObserver(notifier);

        Scanner scanner = new Scanner(System.in);

        while (true) {
            System.out.println("Enter command:");
            String command = scanner.nextLine();
            String[] parts = command.split(" ", 4); // Split into up to 4 parts

            switch (parts[0]) {
                case "add_classroom":
                    if (parts.length == 2) {
                        new AddClassroomCommand(classroomFactory, parts[1], classrooms).execute();
                    } else {
                        System.out.println("Invalid command format.");
                    }
                    break;
                case "add_student":
                    if (parts.length == 3) {
                        String studentId = parts[1];
                        String className = parts[2];
                        new AddStudentCommand(studentFactory, studentId, className, classrooms).execute();
                    } else {
                        System.out.println("Invalid student command format.");
                    }
                    break;
                case "schedule_assignment":
                    if (parts.length == 3) {
                        new ScheduleAssignmentCommand(parts[1], parts[2], classrooms).execute();
                    } else {
                        System.out.println("Invalid command format.");
                    }
                    break;
                case "submit_assignment":
                    if (parts.length == 4) {
                        String studentId = parts[1];
                        String className = parts[2];
                        String assignmentDetails = parts[3];
                        new SubmitAssignmentCommand(studentId, className, assignmentDetails, assignmentManager).execute();
                    } else {
                        System.out.println("Invalid submit command format.");
                    }
                    break;
                default:
                    System.out.println("Unknown command.");
                    break;
            }
        }
    }
}
